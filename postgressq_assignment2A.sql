DROP SCHEMA IF EXISTS movieratings CASCADE;
CREATE SCHEMA movieratings;

-- Movies 
CREATE TABLE movieratings.movies (
  movie_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title TEXT NOT NULL,
  release_year INT,
  UNIQUE(title, release_year)
);

-- table for raters
CREATE TABLE movieratings.raters (
  rater_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE
);

-- Ratings table 
CREATE TABLE movieratings.ratings (
  rating_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  rater_id INT NOT NULL REFERENCES movieratings.raters(rater_id) ON DELETE CASCADE,
  movie_id INT NOT NULL REFERENCES movieratings.movies(movie_id) ON DELETE CASCADE,
  rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
  rated_at DATE DEFAULT CURRENT_DATE,
  UNIQUE(rater_id, movie_id)
);

-- Optional indexes
CREATE INDEX ON movieratings.ratings (movie_id);
CREATE INDEX ON movieratings.ratings (rater_id);

-- Insert six recent popular movies
INSERT INTO movieratings.movies (title, release_year) VALUES
('The Phoenician Scheme', 2025),
('Lilo & Stitch', 2025),
('Friendship', 2024),
('Spider-Man: Across the Spider-Verse', 2023),
('Inside Out 2', 2024),
('Heretic', 2024);

-- Insert five raters
INSERT INTO movieratings.raters (name) VALUES
('Hayley'), ('Garrett'), ('Finn'), ('Stephen'), ('Walter');

-- Hayley (all six)
INSERT INTO movieratings.ratings (rater_id, movie_id, rating) VALUES
  ((SELECT rater_id FROM movieratings.raters WHERE name='Hayley'),
   (SELECT movie_id FROM movieratings.movies WHERE title='The Phoenician Scheme' AND release_year=2025), 5),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Hayley'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Lilo & Stitch' AND release_year=2025), 4),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Hayley'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Friendship' AND release_year=2024), 5),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Hayley'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Spider-Man: Across the Spider-Verse' AND release_year=2023), 5),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Hayley'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Inside Out 2' AND release_year=2024), 4),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Hayley'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Heretic' AND release_year=2024), 4);

-- Garrett (missing Spider man)
INSERT INTO movieratings.ratings (rater_id, movie_id, rating) VALUES
  ((SELECT rater_id FROM movieratings.raters WHERE name='Garrett'),
   (SELECT movie_id FROM movieratings.movies WHERE title='The Phoenician Scheme' AND release_year=2025), 4),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Garrett'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Lilo & Stitch' AND release_year=2025), 5),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Garrett'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Friendship' AND release_year=2024), 4),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Garrett'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Inside Out 2' AND release_year=2024), 5),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Garrett'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Heretic' AND release_year=2024), 3);

-- Finn (missing Lilo & Stitch and Heretic)
INSERT INTO movieratings.ratings (rater_id, movie_id, rating) VALUES
  ((SELECT rater_id FROM movieratings.raters WHERE name='Finn'),
   (SELECT movie_id FROM movieratings.movies WHERE title='The Phoenician Scheme' AND release_year=2025), 3),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Finn'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Friendship' AND release_year=2024), 4),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Finn'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Spider-Man: Across the Spider-Verse' AND release_year=2023), 5),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Finn'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Inside Out 2' AND release_year=2024), 4);

-- Stephen (missing Friendship and Inside Out 2)
INSERT INTO movieratings.ratings (rater_id, movie_id, rating) VALUES
  ((SELECT rater_id FROM movieratings.raters WHERE name='Stephen'),
   (SELECT movie_id FROM movieratings.movies WHERE title='The Phoenician Scheme' AND release_year=2025), 5),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Stephen'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Lilo & Stitch' AND release_year=2025), 3),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Stephen'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Spider-Man: Across the Spider-Verse' AND release_year=2023), 3),
     ((SELECT rater_id FROM movieratings.raters WHERE name='Stephen'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Heretic' AND release_year=2024), 4);

-- Walter (missing Lilo & Stitch)
INSERT INTO movieratings.ratings (rater_id, movie_id, rating) VALUES
  ((SELECT rater_id FROM movieratings.raters WHERE name='Walter'),
   (SELECT movie_id FROM movieratings.movies WHERE title='The Phoenician Scheme' AND release_year=2025), 4),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Walter'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Friendship' AND release_year=2024), 5),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Walter'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Spider-Man: Across the Spider-Verse' AND release_year=2023), 4),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Walter'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Inside Out 2' AND release_year=2024), 5),
  ((SELECT rater_id FROM movieratings.raters WHERE name='Walter'),
   (SELECT movie_id FROM movieratings.movies WHERE title='Heretic' AND release_year=2024), 4);

-- View for analysis
CREATE OR REPLACE VIEW movieratings.v_ratings AS
SELECT
  r.name AS rater,
  m.title AS movie,
  m.release_year,
  rt.rating::numeric,
  rt.rated_at
FROM movieratings.ratings rt
JOIN movieratings.raters r ON rt.rater_id = r.rater_id
JOIN movieratings.movies m ON rt.movie_id = m.movie_id;

SELECT table_name
FROM information_schema.tables
WHERE table_schema = 'movieratings'
ORDER BY table_name;

SELECT * FROM movieratings.v_ratings ORDER BY rater, movie;
